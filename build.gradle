/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'patrickgrosslicht' at '10/13/16 9:16 PM' with Gradle 3.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'


mainClassName = "com.grosslicht.unitbot.UnitBotKt"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter() //This prevents issues with transitive dependencies
    maven {
        url  "https://jitpack.io"
    }
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.7'
    compile 'io.github.microutils:kotlin-logging:1.3.3'
    compile 'com.github.DV8FromTheWorld:JDA:3.0-SNAPSHOT'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
buildscript {
    ext.kotlin_version = '1.0.4'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

def versionObj = new Version(major: 1, minor: 0, revision: 0)
project.version = "${versionObj}"

docker {
    url = 'unix:///var/run/docker.sock'
    javaApplication {
        baseImage = 'openjdk:8-jre'
        maintainer = 'Patrick Grosslicht <patrick@grosslicht.com>'
        tag = "registry.grosslicht.com/pdg/unitbot:${project.version}"
        ports = []
    }
}

class Version {
    int major, minor, revision

    String getBuild() {
        System.getenv('BUILD_NUMBER') ?: 'dev'
    }

    String toString() {
        "${major}.${minor}.${revision}-${build}"
    }
}

