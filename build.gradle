/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'patrickgrosslicht' at '10/13/16 9:16 PM' with Gradle 3.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'


mainClassName = "com.grosslicht.unitbot.UnitBotKt"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter() //This prevents issues with transitive dependencies
    maven {
        url  "https://jitpack.io"
    }
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.8.2'
    compile 'io.github.microutils:kotlin-logging:1.4.4'
    compile 'com.github.kittinunf.fuel:fuel:1.7.0'
    compile 'com.github.salomonbrys.kotson:kotson:2.5.0'
    compile 'net.dv8tion:JDA:3.1.1_212'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
buildscript {
    ext.kotlin_version = '1.1.2'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.7'
    }
}

def versionObj = new Version(major: 2, minor: 2, revision: 0)
project.version = "${versionObj}"

processResources {
    filesMatching("**/build.properties") {
        expand(project: project)
    }
}

docker {
    url = 'unix:///var/run/docker.sock'
}

def dockerImage = System.getenv('CONTAINER_NAME')

task dockerCopyDistResources(type: Copy, dependsOn: distTar) {
    description = "Copies the distribution resources to a temporary directory for image creation."
    group = 'docker'
    from { distTar.archivePath }
    into { dockerDistTar.destFile.parentFile }
}

task dockerDistTar(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile, dependsOn: 'dockerCopyDistResources') {
    description = 'Creates the Docker image for the Java application.'
    group = 'docker'
    from { "openjdk:8-jre" }
    maintainer { "Patrick Grosslicht <patrick@grosslicht.com>" }
    addFile({ distTar.archivePath.name }, { '/' })
    entryPoint { String installDir = distTar.archiveName - ".${distTar.extension}"
        "/$installDir/bin/$project.applicationName".toString() }
}

task dockerBuildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: 'dockerDistTar') {
    description = 'Builds the Docker image for the Java application.'
    conventionMapping.inputDir = { dockerDistTar.destFile.parentFile }
    conventionMapping.tag = { "${dockerImage}:${project.version}".toString() }
}


task tagAsLatest(type: com.bmuschko.gradle.docker.tasks.image.DockerTagImage, dependsOn: 'dockerBuildImage') {
    targetImageId { dockerBuildImage.getImageId() }
    repository = dockerImage
    tag = 'latest'
}

class Version {
    int major, minor, revision

    String getBuild() {
        System.getenv('TRAVIS_BUILD_NUMBER') ?: 'dev'
    }

    String toString() {
        "${major}.${minor}.${revision}-${build}"
    }
}

